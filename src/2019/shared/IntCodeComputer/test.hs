import Test.Tasty.Hspec
import IntCodeComputer

import Data.Vector

main = hspec $
  describe "IntCode computer tests" $ do
    context "Run relative tests" $ do
      it "109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99 replicates itself" $
        runProgram (loadProgram [109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99]) [] `shouldBe` 
          (fromList [109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,1],
            15,
            16,
            [109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99])

      it "Relative stuff happens" $
        runProgram 
          (loadProgram [109,20,109,25,1101,2,2,15,204,-30,99]) [] `shouldBe` 
          (fromList [109,20,109,25,1101,2,2,15,204,-30,99,0,0,0,0,4],
            10,
            45,
            [4])

      it "1102,34915192,34915192,7,4,7,99,0 outputs a 16 digit number" $
        runProgram 
          (loadProgram [1102,34915192,34915192,7,4,7,99,0]) [] `shouldBe` 
          (fromList [1102,34915192,34915192,7,4,7,99,1219070632396864],
            6,
            0,
            [1219070632396864])

      it "104,1125899906842624,99 outputs a large number" $
        runProgram 
          (loadProgram [104,1125899906842624,99]) [] `shouldBe` 
          (fromList [104,1125899906842624,99],
            2,
            0,
            [1125899906842624])

    context "Run Day 5 tests" $ do
      it "1002,4,3,4,33 becomes 1002,4,3,4,99" $
        runProgram (loadProgram [1002,4,3,4,33]) [0] `shouldBe` (fromList [1002,4,3,4,99],4,0,[])

      it "3,0,4,0,99 becomes 10,0,4,0,99" $
        runProgram (loadProgram [3,0,4,0,99]) [10] `shouldBe` (fromList [10,0,4,0,99],4,0,[10])

      it "104,0,99 becomes 104,0,99" $
        runProgram (loadProgram [104,0,99]) [0] `shouldBe` (fromList [104,0,99],2,0,[0])

      it "1101,100,-1,4,0 becomes 1101,100,-1,4,99" $
        runProgram (loadProgram [1101,100,-1,4,0]) [10] `shouldBe` (fromList [1101,100,-1,4,99],4,0,[])

      it "3,9,8,9,10,9,4,9,99,-1,8 and input 8 outputs 1" $
        runProgram (loadProgram [3,9,8,9,10,9,4,9,99,-1,8]) [8] `shouldBe` (fromList [3,9,8,9,10,9,4,9,99,1,8],8,0,[1])

      it "3,9,8,9,10,9,4,9,99,-1,8 and input 7 outputs 0" $
        runProgram (loadProgram [3,9,8,9,10,9,4,9,99,-1,8]) [7] `shouldBe` (fromList [3,9,8,9,10,9,4,9,99,0,8],8,0,[0])

      it "3,9,7,9,10,9,4,9,99,-1,8 and input 7 outputs 1" $
        runProgram (loadProgram [3,9,7,9,10,9,4,9,99,-1,8]) [7] `shouldBe` (fromList [3,9,7,9,10,9,4,9,99,1,8],8,0,[1])

      it "3,9,8,9,10,9,4,9,99,-1,8 and input 8 outputs 0" $
        runProgram (loadProgram [3,9,7,9,10,9,4,9,99,-1,8]) [8] `shouldBe` (fromList [3,9,7,9,10,9,4,9,99,0,8],8,0,[0])
        
      it "3,3,1108,-1,8,3,4,3,99 and input 8 outputs 1" $
        runProgram (loadProgram [3,3,1108,-1,8,3,4,3,99]) [8] `shouldBe` (fromList [3,3,1108,1,8,3,4,3,99],8,0,[1])
    
      it "3,3,1108,-1,8,3,4,3,99 and input 7 outputs 0" $
        runProgram (loadProgram [3,3,1108,-1,8,3,4,3,99]) [7] `shouldBe` (fromList [3,3,1108,0,8,3,4,3,99],8,0,[0]) 

      it "3,3,1107,-1,8,3,4,3,99 and input 7 outputs 1" $
        runProgram (loadProgram [3,3,1107,-1,8,3,4,3,99]) [7] `shouldBe` (fromList [3,3,1107,1,8,3,4,3,99],8,0,[1])
        
      it "3,3,1107,-1,8,3,4,3,99 and input 8 outputs 0" $
        runProgram (loadProgram [3,3,1107,-1,8,3,4,3,99]) [8] `shouldBe` (fromList [3,3,1107,0,8,3,4,3,99],8,0,[0]) 

      it "3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9 and input 0 outputs 0" $
        runProgram (loadProgram [3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9]) [0] `shouldBe` (fromList [3,12,6,12,15,1,13,14,13,4,13,99,0,0,1,9],11,0,[0])
            
      it "3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9 and input 1 outputs 1" $
        runProgram (loadProgram [3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9]) [1] `shouldBe` (fromList [3,12,6,12,15,1,13,14,13,4,13,99,1,1,1,9],11,0,[1]) 

      it "3,3,1105,-1,9,1101,0,0,12,4,12,99,1 and input 0 outputs 0" $
        runProgram (loadProgram [3,3,1105,-1,9,1101,0,0,12,4,12,99,1]) [0] `shouldBe` (fromList [3,3,1105,0,9,1101,0,0,12,4,12,99],11,0,[0])
                
      it "3,3,1105,-1,9,1101,0,0,12,4,12,99,1 and input 1 outputs 1" $
        runProgram (loadProgram [3,3,1105,-1,9,1101,0,0,12,4,12,99,1]) [1] `shouldBe` (fromList [3,3,1105,1,9,1101,0,0,12,4,12,99,1],11,0,[1]) 
    
      it "Input 7 outputs 999" $
        runProgram (loadProgram [
          3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,
          1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,
          999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99
        ]) [7] `shouldBe` (fromList [
          3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,
          1106,0,36,98,0,7,1002,21,125,20,4,20,1105,1,46,104,
          999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99
        ],46,0,[999])
                    
      it "Input 8 outputs 1000" $
        runProgram (loadProgram [
          3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,
          1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,
          999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99
        ]) [8] `shouldBe` (fromList [
          3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,
          1106,0,36,98,1000,8,1002,21,125,20,4,20,1105,1,46,104,
          999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99
        ],46,0,[1000])
    
      it "Input 9 outputs 1001" $
        runProgram (loadProgram [
          3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,
          1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,
          999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99
        ]) [9] `shouldBe` (fromList [
          3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,
          1106,0,36,98,1001,9,1002,21,125,20,4,20,1105,1,46,104,
          999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99
        ],46,0,[1001]) 
            
    context "Run day 2 tests" $ do
      it "1,0,0,0,99 becomes 2,0,0,0,99" $
        runProgram (loadProgram [1,0,0,0,99]) [0] `shouldBe` (fromList [2,0,0,0,99],4,0,[])
      
      it "2,3,0,3,99 becomes 2,3,0,6,99" $
        runProgram (loadProgram [2,3,0,3,99]) [0] `shouldBe` (fromList [2,3,0,6,99],4,0,[])

      it "2,4,4,5,99,0 becomes 2,4,4,5,99,9801" $
        runProgram (loadProgram [2,4,4,5,99,0]) [0] `shouldBe` (fromList [2,4,4,5,99,9801],4,0,[])

      it "1,1,1,4,99,5,6,0,99 becomes 30,1,1,4,2,5,6,0,99" $
        runProgram (loadProgram [1,1,1,4,99,5,6,0,99]) [0] `shouldBe` (fromList [30,1,1,4,2,5,6,0,99],8,0,[])